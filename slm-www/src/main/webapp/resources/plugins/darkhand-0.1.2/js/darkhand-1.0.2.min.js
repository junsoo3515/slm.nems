(function (a) { if (typeof define === "function" && define.amd) { define(["jquery"], a) } else { a(jQuery) } }(function (b) { b.fn.preUrl = "/"; b.fn.sysUrl = "/"; b.fn.serializeObject = function () { var e = {}; var d = this.serializeArray(); b.each(d, function () { if (e[this.name]) { if (!e[this.name].push) { e[this.name] = [e[this.name]] } e[this.name].push(this.value || "") } else { e[this.name] = this.value || "" } }); return e }; var c = function (e, d) { this.$element = b(e); this.options = b.extend(true, {}, b.fn.notify.defaults, d); this.$note = (this.options.tabID ? e : b('<div class="alert"></div>')); if (this.options.transition) { if (this.options.transition == "fade") { this.$note.addClass("in").addClass(this.options.transition) } else { this.$note.addClass(this.options.transition) } } else { this.$note.addClass("fade").addClass("in") } if (this.options.type) { this.$note.addClass("alert-" + this.options.type) } else { this.$note.addClass("alert-success") } if (!this.options.message && this.$element.data("message") !== "") { this.$note.html(this.$element.data("message")) } else { if (typeof this.options.message === "object") { if (this.options.message.html) { this.$note.html(this.options.message.html) } else { if (this.options.message.text) { this.$note.text(this.options.message.text) } else { this.$note.html(this.options.message) } } } } if (this.options.closable) { var f = b('<a class="close pull-right" href="#">&times;</a>'); b(f).on("click", b.proxy(a, this)); this.$note.prepend(f) } return this }; var a = function () { this.options.onClose(); b(this.$note).remove(); this.options.onClosed() }; c.prototype.show = function () { if (this.options.fadeOut.enabled) { this.$note.delay(this.options.fadeOut.delay || 3000).fadeOut("slow", b.proxy(a, this)) } if (!this.options.tabID) { this.$element.append(this.$note) } this.$note.alert() }; c.prototype.hide = function () { if (this.options.fadeOut.enabled) { this.$note.delay(this.options.fadeOut.delay || 3000).fadeOut("slow", b.proxy(a, this)) } else { a.call(this) } }; b.fn.notify = function (d) { return new c(this, d) }; b.fn.notify.defaults = { type: "success", tabID: null, closable: true, transition: "fade", fadeOut: { enabled: true, delay: 3000 }, message: null, onClose: function () { }, onClosed: function () { } }; b.fn.logOut = function (d) { if (d === undefined) { d = localStorage.token } b.ajax({ url: "/auth/session/invalidate/" + d, type: "GET", contentType: "application/json; charset=utf-8", dataType: "json", success: function (f, e) { if (f.invalidated === true) { localStorage.clear() } location.href = b.fn.preUrl }, error: function (f, e) { console.log("ajax - error") } }) }; b.fn.parseURL = function (e) { if (e === undefined) { e = document.referrer } if (e === "") { e = document.location.href } var d = document.createElement("a"); d.href = e; return { source: e, protocol: d.protocol.replace(":", ""), host: d.hostname, port: d.port, query: d.search, params: (function () { var h = {}, g = d.search.replace(/^\?/, "").split("&"), f = g.length, j = 0, k; for (; j < f; j++) { if (!g[j]) { continue } k = g[j].split("="); h[k[0]] = k[1] } return h })(), file: (d.pathname.match(/\/([^\/?#]+)$/i) || [, ""])[1], hash: d.hash.replace("#", ""), path: d.pathname.replace(/^([^\/])/, "/$1"), relative: (d.href.match(/tps?:\/\/[^\/]+(.+)/) || [, ""])[1], segments: d.pathname.replace(/^\//, "").split("/") } }; b.fn.accessURL = function () { var g = false; var f = [b.fn.sysUrl + "Login/Index"]; var d = b.fn.parseURL().relative; for (var e = 0; e < f.length; e++) { if (d === f[e]) { g = true; d = b.fn.preUrl; break } } return { isState: g, retURL: d } }; b.fn.setBtnStyle = function (d) { if (d !== null) { b.each(d, function (e, g) { var f = g.ele; if (g.isShow === undefined) { g.isShow = true } if (g.txt !== undefined) { f.text(g.txt) } if (g.isShow === true) { f.show() } else { f.hide() } }) } }; b.fn.modal.Constructor.prototype.removeBackdrop = function () { if (this.$backdrop !== undefined) { this.$backdrop.remove(); this.$backdrop = null } }; b.fn.setFileList = function (d) { if (d !== null) { b.fn.clearFileList(d.ele, d.thumbEle); d.ele.addClass("fileupload-processing"); b.ajax({ url: b.fn.sysUrl + "files/getData/" + b.fn.sysUrl + "/" + d.tbKey + "/" + d.tbSeq + "/" + d.gKey, dataType: "json", beforeSend: function () { d.ele.addClass("fileupload-processing") }, context: d.ele }).always(function () { b(this).removeClass("fileupload-processing") }).done(function (e) { b(this).fileupload("option", "done").call(this, b.Event("done"), { result: e }) }); return true } return false }; b.fn.initFileAction = function (f) { if (f !== null) { var e = "@"; if (f.extKey !== undefined) { switch (f.extKey) { case "images": e = /(\.|\/)(gif|jpe?g|png)$/i; break; case "documents": e = /(\.|\/)(xls|docx|pds|xlsx|doc|txt|hwp|pdf)$/i; break; default: e = "@"; break } } if (f.dropObj === undefined) { f.dropObj = b(document) } if (f.compressFl === undefined) { f.compressFl = 0 } f.ele.fileupload("option", "redirect", b.fn.sysUrl + "/Content/pangaea21/jquery-file-upload-v9.9.3/cors/result.html?%s"); var d = f.ele.fileupload({ url: b.fn.sysUrl + "files/upload", dataType: "json", acceptFileTypes: e, disableImageResize: /Android(?!.*Chrome)|Opera/.test(window.navigator.userAgent), maxFileSize: 5000000, dropZone: f.dropObj, autoUpload: false, limitConcurrentUploads: f.maxCnt, maxNumberOfFiles: f.maxCnt, formData: { rootPath: b.fn.sysUrl, systemPath: f.systemPath, folPath: f.folPath, tableKey: f.tableKey, seq: f.seq, gubunKey: f.gubunKey } }); b.fn.setRealSeq(f.ele, { seq: f.seq, gubunKey: f.gubunKey }); if (f.thumbEle !== undefined) { d.bind("fileuploaddone", function (k, j) { var i = b(this).data("blueimp-fileupload") || b(this).data("fileupload"), g = j.getFilesFromResponse || i.options.getFilesFromResponse, h = g(j); if (j.context) { var l = b("#filesPreview").removeClass("hide").find(".file-preview-thumbnails"); j.context.each(function (m) { if (!b(j.context[m]).hasClass(i.options.uploadTemplateId)) { return true } var n = h[m] || { error: "Empty file upload result" }; if (n.files_seq !== undefined) { if (n.thumbnailUrl) { l.append("\n<div id='fileKey" + n.files_seq + "' class='file-preview-frame'><a href='" + n.url + "' title='" + n.name + "' alt='" + n.name + "' download='" + n.name + "' data-gallery='#blueimp-gallery'><img src='" + n.thumbnailUrl + "' class='file-preview-image'></a></div>") } else { l.append("\n<div id='fileKey" + n.files_seq + "' class='file-preview-frame'><div class='file-preview-other'><a href='" + n.url + "' title='" + n.name + "' alt='" + n.name + "'><h2><i class='glyphicon glyphicon-file'></i></h2>" + n.name + "</a></div></div>") } } }) } }).bind("fileuploaddestroy", function (i, h) { var g = h.url.substring(h.url.indexOf("=") + 1).split("/"); b("#fileKey" + g[g.length - 1]).remove() }) } if (f.compressFl === 1) { b.fn.compress(d, f) } return d } }; b.fn.compress = function (d, e) { d.bind("fileuploadstopped", function (f) { b.ajax({ url: b.fn.sysUrl + "files/compress", type: "POST", dataType: "json", contentType: "application/json; charset=utf-8", data: JSON.stringify({ real_tb: e.tableKey, real_seq: d.fileupload("option", "formData").seq, gubun_cd: e.gubunKey }), success: function (g) { setOSXModal("압축 문서 생성에 " + (g === 1 ? "성공" : "실패") + "하였습니다") }, error: function (g, i, h) { console.log("Error '" + g.status + "' (textStatus: '" + i + "', errorThrown: '" + h + "')"); setOSXModal("압축 문서 생성에 실패하였습니다.") } }) }) }; b.fn.setRealSeq = function (g, f, d) { var e = g.fileupload("option", "formData"); if (f === undefined) { f = { tableKey: undefined, seq: undefined, gubunKey: undefined } } b.each(f, function (i, h) { e[i] = h }); g.fileupload("option", "formData", e); if (e.seq === undefined) { b.fn.clearFileList(g, d) } g.fileupload((e.seq !== undefined ? "enable" : "disable")) }; b.fn.clearFileList = function (e, d) { if (e !== null) { e.find(".files").empty(); if (d !== undefined) { d.find(".file-preview-thumbnails").empty() } } }; b.fn.deleteAll = function (d) { b.ajax({ url: b.fn.sysUrl + "files/deleteAll", type: "POST", dataType: "json", contentType: "application/json; charset=utf-8", data: JSON.stringify(d), success: function (e) { setOSXModal("파일 삭제를 " + (e === 1 ? "성공" : "실패") + "하였습니다") }, error: function (e, g, f) { console.log("Error '" + e.status + "' (textStatus: '" + g + "', errorThrown: '" + f + "')"); setOSXModal("파일 삭제를 실패하였습니다.") } }) }; b.fn.setInputLockStyle = function (d) { if (d !== undefined) { jQuery(d).each(function (e, f) { f.oObj.on("change", function () { if (f.sty === undefined) { f.sty = "readonly" } f.tObj.attr(f.sty, jQuery(this)[0].checked === f.isCompare ? false : true) }) }) } }; return { version: "1.0.1", author: "darkhand", jQuery: b } }));